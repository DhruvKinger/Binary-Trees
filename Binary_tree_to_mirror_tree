#include <bits/stdc++.h> 
using namespace std; 
struct node { 
	node* left; 
	node* right; 
	int data; 
}; 

node* newNode(int key) 
{ 
	node* nodex = new node(); 
	nodex->left = nodex->right = NULL; 
	nodex->data = key; 
	return nodex; 
} 

void mirror(node* root)
{
     if (root == NULL) 
        return; 
        std::queue<node* > q;
        q.push(root);
        while(!q.empty())
        {
            node* x=q.front();
            q.pop();
            swap(x->left,x->right);
            if(x->left)
            q.push(x->left);
            if(x->right)
            q.push(x->right);
            
        }
}

void inOrder(struct node* nodex) 
{ 
    if(nodex==NULL) 
        return; 
    inOrder(nodex->left); 
    cout << nodex->data << " "; 
    inOrder(nodex->right); 
} 

int main() 
{ 
 struct node *root = newNode(1); 
  root->left        = newNode(2); 
  root->right       = newNode(3); 
  root->left->left  = newNode(4); 
  root->left->right = newNode(5); 
  cout << "\n Inorder traversal of the"
            " constructed tree is \n"; 
    inOrder(root); 
     mirror(root); 
  cout << "\n Inorder traversal of the "
           "mirror tree is \n"; 
    inOrder(root); 
    	return 0; 
} 
