#include <bits/stdc++.h>
using namespace std;
struct node{
  int data;
  struct node* left,*right;
  
};
struct node *new_node(int data)
{
    node* create=new node; 
    create->data=data;
    create->left=create->right=NULL;
    return(create);
}

int isbst(node* root,int min,int max)
{
    if(root==NULL)  // an empty tree is BST 
    return 1;

    if(root->data<min || root->data>max)
    {
        return 0;  // false if this node violates the min/max constraint
    }

return isbst(root->left,min,root->data-1) && isbst(root->right,root->data+1,max);

}

int IsBst(node* root)
{
    return isbst(root,INT_MIN,INT_MAX);
}

int main()
{    node* a=new_node(5); 
     a->left = new_node(2); 
    a->right = new_node(8); 
    a->left->left  = new_node(1); 
    a->left->right = new_node(3);
    a->right->left= new_node(6); 
	a->right->left->right = new_node(7); 
    IsBst(a)?cout<<"Yes it is a BST ":cout<<"Not a BST";
   return 0; 
}
